Что такое deamon thread?
Демон-поток (daemon thread) - это поток, который работает в фоновом режиме и завершается, когда все
недемонические потоки завершают свое выполнение.они используются для выполнения фоновых задач,таких как сборка мусора.

Как можно прервать поток извне?
Поток можно прервать извне с использованием метода interrupt() класса Thread. Это устанавливает флаг прерывания,
который может быть проверен внутри потока, чтобы определить, было ли потребовано прерывание.

В каком состоянии находится поток, когда внутри был вызван Thread.sleep?
переходит в состояние TIMED_WAITING. Это состояние означает, что поток ждет определенное количество времени
перед возобновлением выполнения.

Как правильно обрабатывать исключение, которые может выкинуть Thread.sleep?
Исключение InterruptedException может быть выброшено, если поток был прерван во время сна. Обычно его обрабатывают
путем восстановления состояния или завершения потока.

Какие состояния потока вы знаете?
NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING и TERMINATED.

Можно ли перезапустить поток?
После завершения выполнения потока нельзя его перезапустить.Если нужно повторное использование потока,
создаю новый экземпляр.

Какие параметры можно регулировать у потока?
имя потока, приоритет, демонический статус и другие параметры, связанные с выполнением.

За что отвечает приоритет потока?
Приоритет потока определяет, насколько поток предпочтителен для выполнения перед другими потоками.
Высокий приоритет не гарантирует абсолютного приоритета, но увеличивает вероятность выбора потока планировщиком.

Что такое syncronized и для чего он существует?
используется для создания критической секции кода.гарантирует, что только один поток может выполнить
синхронизированный блок кода одновременно, что предотвращает состояние гонки и обеспечивает безопасность потоков.

Что такое монитор в многопоточном приложении?
это механизм, используемый для обеспечения синхронизации доступа к общим ресурсам. Каждый объект в Java связан
с монитором, и только один поток может владеть монитором объекта в определенный момент времени.
synchronized использует мониторы для обеспечения синхронизации.

-------------------------------------------------------------------------------------------------------

Создайте 3 потока и запустите их (Каждый поток должен печатать свое название)
Создайте массив из 10000 чисел с рандомными значениями от 0 до 10000. После чего запускаются два потока.
Первый поток находит максимум в массиве, второй — минимум. Результаты вычислений возвращаются в метод main().
Есть компания, у компании в определенный момент может быть кассовый разрыв (это не страшно), но в конечном итоге
компания должна получить прибыль. У нас есть расходы и доходы. Напишите программу, в которой один поток будет статьей
расходов и он будет отнимать из поля balance 5, а второй поток будет прибавлять 10 Внутри каждого потока создайте
цикл от 1 до 10000 и проделывайте операцию, в конечном итоге на балансе клиента должно быть 50_000 (если число не
совпало, подумайте про блоки синхронайзд или про атомик переменные)
Создайте дедлок
Создайте демонический поток, который будет писать каждые 3 секунды текущее время, основной поток усыпите на 1 минуту
создайте поток и запустите его, распечатайте его сотояние до начала работы thread.getState(), во время работы
и после завершения работы
Уровень 2
Задача со звездочкой - Возьмите пример из одной из домашек с сортировкой массива слиянием - merge sort и попробуйте
распарелелить его (например первую половину массива отдать ожному потоку, вторую половину второму потоку)