Как можно определить single responsibility?
класс должен иметь только одну причину для изменения. Это означает, что класс должен быть ответственен только
за одну важную часть функциональности.

Почему open/close нужно соблюдать всегда при написании нового кода?
классы должны быть открыты для расширения, но закрыты для модификации. Это означает, что новая функциональность
должна добавляться через расширение, а не изменение существующего кода.

Что позволяет соблюдать принцип подстановки Барбары Лисков?
объекты базового класса должны быть заменяемыми объектами производного класса без изменения правильности программы.

В чем суть разделения по интерфейсам?
клиенты не должны зависеть от интерфейсов, которые они не используют. Интерфейс должен содержать только те методы,
которые нужны конкретному клиенту.

Что запрещено знать родителю(абстракции) в депенденси инверсии?
(Dependency Inversion Principle, DIP) высокоуровневые модули не должны зависеть от низкоуровневых модулей.
Оба должны зависеть от абстракций. Детали должны зависеть от абстракций, а не наоборот.

Из-за чего может появиться оверинжиниринг?
может возникнуть, когда разработчики создают более сложные решения, чем необходимо. Это может быть вызвано излишней
абстракцией, переусложнением кода, или избыточным использованием паттернов.

Как избежать проблем с плохой поддержкой кода?
следует придерживаться хорошей документации, использовать ясные и осмысленные имена переменных и методов, а также
регулярно проводить рефакторинг для улучшения читаемости и обслуживаемости кода.

Какие примеры декоратора существуют?
Декоратор - структурный паттерн проектирования, который позволяет динамически добавлять объектам новую функциональность.
Java I/O Streams: BufferedInputStream, DataInputStream, BufferedReader - все они могут быть использованы
в качестве декораторов.
Java GUI: В Swing, можно использовать декораторы для добавления новых функций к компонентам интерфейса пользователя.

---------------------------------------------------------------------------------------------------------------------

