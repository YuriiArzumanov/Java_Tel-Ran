Что такое Throwable?
Throwable - это базовый класс в языке программирования Java, который представляет собой исключения (exceptions)
и ошибки (errors) в программе. Исключения используются для обработки ошибок во время выполнения, а ошибки обычно
свидетельствуют о серьезных проблемах в работе приложения или виртуальной машины Java.Throwable имеет два
основных подкласса: Exception (исключение) и Error (ошибка).

Что такое Error?
Error (ошибка) - это подкласс класса Throwable в языке программирования Java, который представляет собой серьезные
проблемы и ошибки, обычно связанные с выполнением приложения или виртуальной машины Java. Ошибки обычно указывают
на непредвиденные и неустранимые проблемы, которые могут быть вызваны внешними факторами, такими как нехватка
системных ресурсов (например, OutOfMemoryError, когда заканчивается память), сбои в работе виртуальной машины
или серьезные ошибки в программном обеспечении.

В чем отличие checked и unchecked? можно ли поймать unchecked exception?
Отличие между checked и unchecked исключениями в языке Java заключается в том, что checked исключения обязаны быть
обработаны или объявлены в блоке throws метода и наследуются от Exception, в то время как unchecked исключения не
требуют обязательной обработки или объявления и наследуются от RuntimeException. Checked исключения обычно связаны
с внешними ресурсами и операциями ввода-вывода, в то время как unchecked исключения чаще всего связаны с ошибками
программирования или критическими ошибками.

В чем разница throw и throws? Где какой используется?
throw и throws - это два различных ключевых слова в языке программирования Java.
throw-используется для явного выбрасывания (генерации) исключения в коде.указывает конкретное исключение, которое нужно
выбросить, с помощью оператора throw, например:throw new SomeException("Это сообщение об ошибке");
throws-используется в объявлении метода для указания того, что этот метод может выбрасывать определенные исключения.
Это не выбрасывает исключение, а просто сообщает о том, какие исключения могут возникнуть при вызове метода. Например:
public void someMethod() throws SomeException { // код метода }

Что можно поймать в catch? В каком порядке отрабатываются catch в try/catch/finally?
В блоке catch в конструкции try/catch можно поймать и обработать исключения, которые соответствуют типу, указанному в
заголовке блока catch.поймать исключения конкретного типа и обработать их в соответствующем блоке catch.В конструкции
try/catch/finally блоки catch отрабатывают в порядке, в котором они перечислены. Когда исключение выбрасывается в блоке
try, система Java ищет подходящий блок catch сверху вниз по порядку. Первый соответствующий (по типу исключения) блок
catch выполняется, и выполнение кода переходит к нему. После выполнения блока catch, выполнение переходит к блоку
finally, если таковой присутствует.

Для чего нужен finally? Всегда ли отработает finally?
finally - это блок в конструкции try/catch/finally, и он используется для выполнения кода, который должен быть
гарантированно выполнен, независимо от того, произошло исключение или нет.
finally всегда отработает, за исключением случаев, когда происходит аварийное завершение программы
(например, с помощью System.exit()) или при выходе из бесконечного цикла внутри блока try.

В чем разница между final/finally/finalyze?
final - ключевое слово для создания неизменяемых переменных, констант, классов и методов.
finally - блок в конструкции try/catch/finally, который гарантирует выполнение кода независимо от исключений.
finalize - метод в классе Object (устарел в современных версиях Java) для завершающих действий на объектах
перед удалением сборщиком мусора.

Если поймать OutOfMemoryError в catch и запустить System.gc(), высвободит ли это память и поможет ли программе?
Поймать OutOfMemoryError и запустить System.gc() не гарантирует освобождение памяти и не поможет программе.
OutOfMemoryError указывает на то, что доступной памяти не хватает, и попытка запуска сборки мусора (System.gc()) обычно
не решает проблему. Это исключение свидетельствует о серьезных проблемах с управлением памятью, и их решение требует
более фундаментальных изменений в программе.

Можно положить Exception внутрь Exception?
можно помещать объекты класса Exception внутрь других объектов класса Exception, создавая цепочку исключений.
Это позволяет сохранять информацию о предыдущих исключениях и передавать ее в новом исключении.

-----------------------------------------------------------------------------------------------------------------------


Государство пытается сдержать цену на хлеб, создайте метод, который будет проверять цену хлеба и если он больше 8 евро,
то будет выкидывать Exception(желательно создать свой Exception) с сообщением хлеб слишком дорогой

Напишите метод buyFood, внутри метода вызовите методы buyBread(используйте логику из предыдущей задачи), buyMeat,
необходимо чтобы мы не падали, если при покупке хлеба выкинулась ошибка (используйте try/catch)

Нужно написать class DayInMonthValidator с методом validate, который будет принимать 2 числа номер месяца и число
месяцы должны быть в промежутке между 1 и 12, иначе выкинуть ошибку, что номер месяца невалидный
количество дней в месяце зависит от номера месяца (считаем что в феврале всегда 28 дней), если больше или меньше 0,
выкинуть какой-нибудь созданный свой Exception

Возьмите предыдущий пример и выкидывайте экспешен с информацией, что пришло на вход и что является допустим значением