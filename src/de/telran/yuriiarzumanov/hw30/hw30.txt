Какие методы у объекта используются у объекта для многопоточности?
wait(), notify(), notifyAll(): для синхронизации потоков.
synchronized: создает критические секции.
join(): ожидает завершения другого потока.

Кто может вызывать wait/notify/notifyAll?
Вызываются на объекте с монитором.
wait(): переводит поток в ожидание.
notify(): будит один случайный поток.
notifyAll(): будит все потоки.

В чем разница между notify и notifyAll?
notify(): будит один поток.
notifyAll(): будит все потоки.

Для чего нужен join?
join(): ожидает завершения другого потока.

Что такое экзекьютор и какие виды вы знаете?
Executor: интерфейс для управления выполнением потоков.
Реализации: ThreadPoolExecutor, ScheduledThreadPoolExecutor

Что необходимо делать с экзекьютором всегда после его выполнения?
Всегда вызывать shutdown() или shutdownNow()

Что такое Future и Callable? Для чего они нужны?
Callable: как Runnable, но возвращает результат и может бросить исключение.
Future: представляет результат асинхронного вычисления.
Используются с ExecutorService для асинхронного получения результатов.

--------------------------------------------------------------------------------------------------------------

Есть отправитель и потребитель, в компании есть только одна машина для отправки груза, напишите программу, которая
позволит получателю получать груз Для этого создайте классы Car, Cargo(груз), Consumer(будет содержать массив Cargo для
отправки - последнее значение null - индикатор окончания отправки), Producer(получает карго), в машине может содержаться
только один груз P.S. решение задачи очень похоже на классную работу
создайте программу, в которой используя ThreadExecutors будем решать следующую задачу: Представим что есть компания,
у которой есть 1_000 товаров и есть 10 касс обслуживания - каждый поток это покупатель, в магазин пришло 200 покупателей,
каждый покупатель может купить рандомно от 1 до 100 товаров, после совершения покупки количество товаров уменьшается,
если количество товаров меньше 0, то писать в консоль, что товар закончился (каждый покупатель будет писать это в консоль)
P.S. подумайте о том что количество товаров это единый счетчик между потоками, подумайте какой экзекьютор использовать
Представим, что у нас есть различные задачи (например почистить зубы, помыть посуду), используя тред экзекьютеры создайте
выполнитель задач - мы хотим хранить информацию о том задача выполнена или нет. Одновременно мы можем выполнять
только 1 задачу, но у нас есть 10 задач (помыть посуду, почистить зубы, поесть, сходить в магазин, купить подарок маме
на день рождения, придумайте какие нибудь задачи), Как только задача выполнилась, результат будет в виде строки
(Например задача помыть посуду выполнена), на выполнение каждой задачи уходит от 10 до 10_000 миллисекунд подождите 50
миллисекунд и закончите работу, после распечатайте результаты в консоль P.S. используйте Callable и Futures.