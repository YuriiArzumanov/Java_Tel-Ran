Что такое Date и какую информацию он содержит?
Date - это класс в языке программирования Java, предназначенный для представления момента времени.Дата и время: Date
хранит информацию о дате и времени, включая год, месяц, день, час, минуту, секунду и миллисекунду.Момент времени: Date
представляет момент времени в миллисекундах, прошедших с начала "эпохи Unix" (1 января 1970 года 00:00:00 UTC).

Для чего используется Calendar? Как создать экземпляр?
экземпляр Calendar, представляющий текущую дату и время с учетом локальных настроек и часового пояса.
Calendar calendar = Calendar.getInstance();

Для чего используются LocalDate,LocalDateTime, ZonalDateTime?
LocalDate, LocalDateTime и ZonedDateTime - это классы из пакета java.time в языке программирования Java, предназначенные
для работы с датой и временем.LocalDate представляет только дату без времени и часового пояса.LocalDateTime представляет
дату и время без часового пояса.ZonedDateTime представляет дату, время и часовой пояс.

Для какой задачи предпочтете использовать LocalDate?
LocalDate предпочтительно использовать для задач, связанных исключительно с датами, без учета времени и часовых поясов.
Вычисление возраста: LocalDate подходит для вычисления разницы между двумя датами и определения возраста
Определение дня недели: легко определить день недели для конкретной даты с помощью LocalDate
Расписание событий: Если нужно создать расписание событий, учитывая только даты, то LocalDate подходит для представления
дат событий.
Управление годовщинами и праздниками: LocalDate позволяет легко работать с годовщинами и праздниками,
которые не требуют точного времени.

В чем преимущества у LocalDate по сравнению с Calendar?
Неизменяемость: LocalDate является неизменяемым классом, что обеспечивает безопасность и предсказуемость в работе с
датами. В отличие от Calendar, который может быть изменен после создания, LocalDate гарантирует, что дата остается
неизменной.
Простота и удобство: LocalDate предоставляет более простой и удобный интерфейс для работы с датами и не требует сложных
манипуляций с индексами и константами, как в случае с Calendar.
Без учета часового пояса: LocalDate представляет только дату без учета времени и часового пояса, что упрощает операции,
связанные исключительно с датой.
Удобные методы: LocalDate предоставляет удобные методы для выполнения распространенных операций с датами, такие как
вычисление разницы между датами, форматирование и сравнение.
Исправление проблем: LocalDate решает некоторые проблемы и недоразумения, связанные с Calendar, включая начало нумерации
месяцев с 1 вместо 0 и другие аномалии.

Как сделать красивый вывод даты?
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd MMMM yyyy");
С помощью метода format объекта DateTimeFormatter преобразуйте дату в строку в желаемом формате:
LocalDate date = LocalDate.now(); // Пример даты
String formattedDate = formatter.format(date);
System.out.println(formattedDate); // Вывод красиво отформатированной даты

----------------------------------------------------------------------------------------------------------------------

Создайте дату - 10 января 2020 (можете использовать любой класс), после попробуйте распечатать его используя форматеры
в виде 10/01/2020, 10-01-2020, 2020 January 10

Распечатайте текущее время, отнимите от текущего времени 10 часов и распечатайте, распечатайте время и сдвиг
(например 10 января 2020 12:00:00 +0200)

Исользуя LocalDate и Calendar (нужно написать два решения) достаньте информацию о:

текущий день недели
текущий день в году
текущая неделя в месяце
текущий месяц
текущий день недели
Превратите строку 10/01/2020 в дату и прибавьте к ней 10 дней и распечатайте в виде 20-01-2020

Превратите строку 10 01 2020 10:00 в дату и прибавьте к ней 10 минут и распечатайте в виде 10-01-2020 10:10

Создайте класс Календарь и класс Событие (Календарь содержит лист Событий, у каждого События есть информация когда он
начался, когда закончился и описание события)

распечатайте все события в порядке возрастания начала события
отсортируйте все события в обратном порядке