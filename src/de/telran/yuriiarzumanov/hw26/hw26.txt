Что такое Maven, Ant и Gradle?
Maven, Ant и Gradle — это инструменты для автоматизации сборки и управления зависимостями в проектах разработки
программного обеспечения.
Maven - это инструмент для автоматизации сборки Java-проектов и управления зависимостями.Основан на концепции
«соглашения перед настройкой» (соглашение о конфигурации), которая позволяет разработчикам сосредотачиваться по коду,
а не при настройке сборки проекта.Использует файлы pom.xml(объектную модель проекта) для описания проекта
и его зависимостей.
Ant - это инструмент для автоматизации сборки проектов, который использует XML-файлы для определения задач
и их последовательности.Создать кастомные сборки сценариев, где задача представляет собой окружное действие, такое как
компиляция, копирование файлов и другие операции.Широко используется для сборки проектов Java, а также для
автоматизации других задач.
Gradle — это инструмент автоматизации сборки и управления зависимостями, который обеспечивает гибкость и мощность
с помощью DSL (Domain-Specific Language) на базе Groovy или Kotlin.Рассматриваем создание сценариев и задачи с
использованием читаемого и гибкого синтаксиса.Поддерживает множество языков программирования и широко применяется
для сборки проектов на Java, Android и других платформах.

Для чего нужны системы сборки?
Сборка систем - это инструменты, которые использовались в разработке программного обеспечения для автоматизации
процесса сборки проекта.
Автоматизация сборки: Системы сборки позволяют разработчикам автоматизировать процесс сборки проекта, что исключает
возможные ошибки и усложняет разработку.
Управление зависимостями: Сборка систем управляет зависимостями между компонентами проекта, что позволяет устанавливать
и обновлять компоненты библиотек.
Соглашение перед настройкой: многие системы сборки, такие как Maven, включают в себя «соглашение перед настройкой»
(соглашение о конфигурации), что делает проект более простым и стандартизированным.
Многозадачность: сборка систем может выполнять множество задач, включая компиляцию, тестирование, упаковку, создание
документации по команде и другие операции в рамках одной.
Отслеживание изменений: Сборка систем может отслеживать изменения в исходных файлах и пересобирать только те части
проекта, которые действительно изменились.
Переносимость: Сборка проекта с использованием системной сборки обеспечивает переносимость между различными
операционными системами и окружениями разработок.

В чем отличия между Maven и Gradle? Когда использовать первый, а когда второй?
Maven предоставляет простой и стандартизированный способ сборки, который подходит для большинства проектов Java.
Gradle, с другой стороны, предоставляет более гибкий и мощный способ сборки, который может быть использован для более
сложных и нестандартных сценариев. Выбор зависит от сложности и специфики проекта, а также от личных предпочтений.

Какой жизненный цикл у Maven? Можем ли мы его поменять?
Жизненный цикл Maven включает три стандартных этапа:
clean: Очистка проекта от предыдущих результатов сборки.
default (или build): Компиляция и сборка проекта, тестирование, создание пакетов
site: Создание документации и отчетов о проекте.
можем изменять и расширять стандартный жизненный цикл Maven, используя плагины и конфигурации. Это позволяет добавлять
дополнительные этапы, цели и фазы в зависимости от требований проекта. Это достигается через настройку pom.xml файла и
использование плагинов Maven.

Есть ли жизненный цикл у Gradle?
у Gradle также есть свой собственный концепт жизненного цикла сборки, но он немного отличается от того, что используется
в Maven. В Gradle жизненный цикл называется "build lifecycle", и он строится вокруг понятия задач (tasks). Жизненный
цикл Gradle не предоставляет строгой структуры, как в Maven, а вместо этого предоставляет гибкость для определения и
выполнения пользовательских задач.Основные фазы в жизненном цикле Gradle включают:
Initialization (Инициализация): Gradle настраивает проект, определяет задачи, инициализирует расширения и плагины.
Configuration (Конфигурация): Происходит конфигурирование проекта, включая определение задач и их зависимостей.
Execution (Выполнение): Выполняются задачи, которые были определены и настроены в предыдущих фазах.

Какие этапы запустятся при запуске mvn package?
Команда mvn package в Maven запускает жизненный цикл сборки до этапа package.
validate (валидация): Проверка корректности проекта и наличия необходимых информаций.
compile (компиляция): Компиляция исходного кода проекта.
test (тестирование): Запуск тестов.
package (упаковка): Упаковка скомпилированного кода и ресурсов в дистрибутивный формат (например, JAR или WAR).

Что обязательно нужно указывать в артифакте мейвена?
В Maven артефакт представляет собой собранный и упакованный продукт проекта, такой как JAR, WAR или другие архивы.
Для корректного определения артефакта в проекте Maven, обычно указывают следующие обязательные элементы в файле pom.xml:
groupId (идентификатор группы):Уникальный идентификатор группы проектов или организации.Пример: com.example.
artifactId (идентификатор артефакта):Уникальное имя артефакта проекта.Пример: my-project.
version (версия):Версия артефакта, обозначающая его текущую версию.Пример: 1.0-SNAPSHOT.

Где хранятся зависимости у мейвена? как можно подключить зависимость?
В Maven зависимости хранятся в локальном репозитории на компьютере, а также в удаленных репозиториях, которые Maven
использует для загрузки зависимостей.Локальный репозиторий Maven обычно располагается в директории пользователя
(~/.m2/repository на Unix-подобных системах или C:\Users\username\.m2\repository на Windows).В этом репозитории хранятся
скачанные и скомпилированные артефакты (JAR-файлы и другие), которые использовались в предыдущих сборках проектов.
Удаленные репозитории:Maven может загружать зависимости из удаленных репозиториев, таких как Maven Central Repository
или корпоративные репозитории.Если зависимость не найдена в локальном репозитории, Maven ищет ее в удаленных
репозиториях, загружает и сохраняет ее в локальном репозитории для будущего использования.
Для подключения зависимости в проекте Maven, необходимо добавить соответствующую секцию в файл pom.xml проекта.
<dependencies>
    <dependency>
        <groupId>group-id</groupId>
        <artifactId>artifact-id</artifactId>
        <version>1.0.0</version>
    </dependency>
</dependencies>
groupId, artifactId и version указывают координаты зависимости.Maven автоматически загрузит эту зависимость при
следующей сборке проекта, скачав ее из удаленного репозитория, если она там отсутствует.

Какая структура у стандартного мейвен проекта?

Структура стандартного проекта Maven обычно следует соглашению перед настройкой (convention over configuration).
my-project
|-- src
|   |-- main
|   |   |-- java       // Исходные коды проекта
|   |   |-- resources  // Ресурсы (например, конфигурационные файлы)
|   |-- test
|       |-- java       // Исходные коды тестов
|       |-- resources  // Ресурсы для тестов
|-- target             // Здесь будут создаваться артефакты сборки (JAR, WAR и т. д.)
|-- pom.xml            // Файл описания проекта и зависимостей

src/main/java: В этой директории располагаются исходные коды основного приложения.
src/main/resources: Здесь хранятся ресурсы, такие как файлы конфигурации, изображения и другие,
используемые основным приложением.
src/test/java: В этой директории размещаются исходные коды тестов для основного приложения.
src/test/resources: Содержит ресурсы, необходимые для тестов, например, тестовые данные и конфигурационные файлы.
target: Это место, куда Maven помещает результаты сборки проекта, такие как JAR-файлы, после выполнения цели сборки.
pom.xml: Файл описания проекта Maven, в котором определены зависимости, плагины, настройки сборки и другая
информация о проекте.

--------------------------------------------------------------------------------------------------------------------

Создайте проект maven - имя artifactId - de.telran, projectId - ваше имя точка фамилия, создайте внутри класс и
напишите в консоль сегодняшнюю дату и время
Запустите различные действия - clean, package, install, test, посмотрите, что будет напечатано в консоли во время сборки
Создайте проект gradle и проделайте те же действия
Создайте второй проект maven artifactId - de.telran, projectId - users, создайте там папку users и создайте
класс Student с параметрами год рождения, фамилия и имя
класс Lesson с параметрами дата урока и список Student, добавьте методы addStudent(Student student),
removeStudent(Student student)
соберите проект из задания 4 и подключите его как зависимость к проекту из задания 1, создайте там урок,
добавьте и удалите студентов